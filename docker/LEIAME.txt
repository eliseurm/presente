Configuracao de um docker monolitico (back e Front) que sera usado no Cloud Run e Cloud Sql da google
=====================================================================================================


- Crie uma pasta docker-monolitico, nele coloque os seguinte arquivos:
----------------------------------------------------------------------

* dockerfile *
Ele sera responsavel por fazer os builds, tanto do back quanto do front

* entrypoint.sh *
Este script é crucial. Ele inicia o backend Java em segundo plano e depois o Nginx em primeiro plano. Ele também configura a porta do Nginx dinamicamente com base na variável de ambiente $PORT fornecida pelo Cloud Run

* nginx.conf.template *
Esta é a configuração do Nginx adaptada. Note que ela não lida com HTTPS, pois isso é feito automaticamente pelo Google Cloud Run. Ela também tem um placeholder LISTEN_PORT que será substituído pelo script acima

* build_cloudrun.sh *
Este script é focado em construir a imagem monolítica e enviá-la para o Google Artifact Registry, que é o local ideal para armazenar imagens para o Cloud Run.

- Configurando o projeto no cloud
Na pagina do cloud, crie um project, service e banco (https://console.cloud.google.com/home/dashboard?project=presente-project)
De permissao ao seu usuario de gravar artefatos. Acrescente o papel 'Gravador do Artifact Registry' (https://console.cloud.google.com/iam-admin/iam?project=presente-project)
Tenha o cloud cli instalado na maquina. (referencia: https://cloud.google.com/sdk/docs/install?hl=pt-br#deb )
$ gcloud init (mantenha o chrome da conta por cima)
  Pick cloud project to use: 2
  Enter project ID you would like to use: presente-project
- Definindo uma regiao para o projeto
$ gcloud config set compute/region southamerica-east1
  Would you like to enable and retry: Y

- Informacoes do cloud
id projeto: presente-project
id servico: presente-id
is sql: presente-sql : Presente#123


- Para iniciar o processo
$ cd docker
$ chmod +x build_cloudrun.sh
$ ./build_cloudrun.sh




- Variáveis de Ambiente para o Cloud Run
----------------------------------------

# Papeis necessarios
Cloud SQL Client

# Ativar Cloud SQL Admin API (https://console.cloud.google.com/apis/library/sqladmin.googleapis.com)
Cloud SQL Admin API

SPRING_DATASOURCE_USERNAME  // O nome de usuário do seu banco de dados no Cloud SQL.
SPRING_DATASOURCE_PASSWORD  // A senha do usuário do banco. Recomenda-se usar o Secret Manager para isso.
SPRING_DATASOURCE_URL // Esta é a variável mais importante e tem um formato específico para se conectar ao Cloud SQL a partir do Cloud Run de forma segura.

Exemplo do formato de SPRING_DATASOURCE_URL
SPRING_DATASOURCE_URL=jdbc:postgresql:///<NOME_DO_BANCO>?cloudSqlInstance=<NOME_DA_CONEXÃO_DA_INSTÂNCIA>&socketFactory=com.google.cloud.sql.postgres.SocketFactory

onde:
<NOME_DO_BANCO>: O nome do banco de dados que você criou (ex: presente_db).
<NOME_DA_CONEXÃO_DA_INSTÂNCIA>: Você encontra este valor na página de visão geral da sua instância do Cloud SQL. Ele tem o formato seu-projeto:regiao:id-da-instancia.

# teste conexao com clup sql ( coloque o ip do seu cloud sql)
$ nc -zv 34.95.176.141 5432

# Cria um secret chamado 'db-password'.
Obs1: Secret Manager API precisa estar ativado
Obs2: Este secrets precisa de autorizacao 'Assessor de secret do Secret Manager' para ser usado
echo -n "Presente-psw#123" | gcloud secrets create db-password --data-file=-

# Para parar sem excluir( fica parado por no maximo 7 dias)
$ gcloud sql instances patch presente-sql --activation-policy=NEVER
# Para voltar
$ gcloud sql instances patch presente-sql --activation-policy=ALWAYS

# Para ver o valor da senha
$ gcloud secrets versions access latest --secret="db-password"

# Adicionando veriaveis ao CloudRun/service
gcloud run deploy presente-monolith \
--image "southamerica-east1-docker.pkg.dev/presente-id/presente-repo/presente-monolith:latest" \
--region "southamerica-east1" \
--allow-unauthenticated \
--set-env-vars="SPRING_DATASOURCE_USERNAME=<SEU_USUARIO_DB>,SPRING_DATASOURCE_URL=jdbc:postgresql:///<NOME_DO_BANCO>?cloudSqlInstance=<NOME_DA_CONEXAO_DA_INSTANCIA>" \
--set-secrets="SPRING_DATASOURCE_PASSWORD=db-password:latest"


