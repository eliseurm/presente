version: '3.7'
services:
  # Serviço do Banco de Dados para testes locais
  postgres-local:
    image: postgres:15
    container_name: local_presente_postgres
    # image: local_presente_postgres:latest
    environment:
      - POSTGRES_USER=presente-user
      - POSTGRES_PASSWORD=Presente-psw#123
      - POSTGRES_DB=presente_db
      - TZ=America/Sao_Paulo
    ports:
      - "5432:5432" # Usamos a porta 5433 na sua máquina para não conflitar com outro Postgres
    volumes:
      - ./postgres_local_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - net-local
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U presente-user -d presente_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da sua aplicação monolítica
  app:
    container_name: local_presente_monolith
    image: local_presente_monolith:latest
    # O build agora é feito pelo Docker Compose usando o Dockerfile monolítico
    build:
      context: ..  # O contexto é a raiz do projeto (um nível acima da pasta 'docker')
      dockerfile: ./docker/dockerfile # Caminho para o Dockerfile a partir da raiz
    ports:
      - "8080:8080" # Acessaremos a aplicação em http://localhost:8080
    environment:
      # Variável que o entrypoint.sh usa para configurar o Nginx
      - PORT=8080
      # Variáveis de ambiente para o backend se conectar ao banco local
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-local:5432/presente_db
      - SPRING_DATASOURCE_USERNAME=presente-user
      - SPRING_DATASOURCE_PASSWORD=Presente-psw#123
    depends_on:
      - postgres-local # Garante que o banco inicie antes da aplicação
    restart: unless-stopped
    networks:
      - net-local
    healthcheck:
      # Testa se o endpoint de saúde do Spring Boot está respondendo
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  net-local:
    driver: bridge
